{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/user.ts","App.tsx","index.tsx"],"names":["BASE_URL","getAllPosts","url","a","fetch","response","ok","Error","status","statusText","json","posts","getUserPosts","userId","userPosts","getPostDetails","postId","post","PostsList","selectPost","selectedPostId","className","length","map","title","id","type","onClick","COMMENTS_URL","getPostComments","data","deleteComment","method","comment","newCommentFormSubmit","body","headers","JSON","stringify","newComment","NewCommentForm","updateComments","useState","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","action","value","placeholder","onChange","target","PostDetails","showComments","setShowComments","commentsFromServer","setCommentsFromServer","commentsState","loadingPostComments","useCallback","comments","handleDeleteButton","useEffect","prevState","getData","Promise","all","users","App","setPosts","setUsers","setUserId","setSeledtedPostId","setPost","usersFromServer","postsFromServer","preparedUsers","filter","user","find","postSearch","getPosts","handlePostSelect","selectedPost","htmlFor","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb753c0c.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api/posts';\n","import { BASE_URL } from './api';\n\nexport const getAllPosts = async (url:string):Promise<Post[]> => {\n  const response = await fetch(`${url}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const posts = await response.json();\n\n  return posts;\n};\n\nexport const getUserPosts = async (userId: number):Promise<Post[]> => {\n  const userPosts = await getAllPosts(`${BASE_URL}?userId=${userId}`);\n\n  return userPosts;\n};\n\nexport const getPostDetails = async (postId: number):Promise<Post | null> => {\n  if (postId !== 0) {\n    const response = await fetch(`${BASE_URL}/${postId}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const post = await response.json();\n\n    return post;\n  }\n\n  return null;\n};\n","import React from 'react';\n\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  selectPost: (value:number) => void,\n  selectedPostId: number | null,\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, selectPost, selectedPostId }) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.length > 0 && posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>\n                User ID:\n                {' '}\n                {post.userId}\n              </b>\n              <p>{post.title}</p>\n            </div>\n            { selectedPostId === post.id ? (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button is-success is-light\"\n                onClick={() => {\n                  selectPost(0);\n                }}\n              >\n                Close\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  selectPost(post.id);\n                }}\n              >\n                Open\n              </button>\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const COMMENTS_URL = 'https://mate.academy/students-api/comments';\n\nexport async function getPostComments(postId:number) {\n  if (postId !== 0) {\n    const response = await fetch(`${COMMENTS_URL}?postId=${postId}`);\n\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    return data;\n  }\n\n  return null;\n}\n\nexport async function deleteComment(postId:number) {\n  const response = await fetch(`${COMMENTS_URL}/${postId}`, {\n    method: 'DELETE',\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const comment = await response.json();\n\n  return comment;\n}\n\nexport async function newCommentFormSubmit(body: CommentBody) {\n  const response = await fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(body),\n  });\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const newComment = await response.json();\n\n  return newComment;\n}\n","import React, { useState } from 'react';\nimport { newCommentFormSubmit } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  updateComments: () => void,\n}\nexport const NewCommentForm: React.FC<Props> = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const onSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    const newComment = await newCommentFormSubmit({\n      postId, name, email, body,\n    });\n\n    if (newComment) {\n      updateComments();\n    }\n\n    clearForm();\n  };\n\n  return (\n    <form\n      action=\"POST\"\n      className=\"NewCommentForm\"\n      onSubmit={onSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={body}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  post: Post,\n  selectedPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ post, selectedPostId }) => {\n  const [showComments, setShowComments] = useState(true);\n  const [commentsFromServer, setCommentsFromServer] = useState<Comment[] | null>([]);\n  const commentsState = commentsFromServer && !showComments ? 'Comments are hidden' : 'No Comments';\n\n  const loadingPostComments = useCallback(async () => {\n    const comments = await getPostComments(selectedPostId);\n\n    if (comments) {\n      setCommentsFromServer(comments);\n    }\n  }, [selectedPostId]);\n\n  const handleDeleteButton = async (id: number) => {\n    const deletedComment = await deleteComment(id);\n\n    if (deletedComment) {\n      loadingPostComments();\n    }\n  };\n\n  useEffect(() => {\n    loadingPostComments();\n\n    return () => {\n\n    };\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {post && (\n        <div>\n          <section className=\"PostDetails__post\">\n            <p>{post?.title}</p>\n          </section>\n\n          <section className=\"PostDetails__comments\">\n            {commentsFromServer && commentsFromServer.length > 0 && (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => setShowComments(prevState => !prevState)}\n              >\n                {commentsFromServer && showComments ? 'Hide comments' : 'Show Comments'}\n              </button>\n            )}\n\n            <ul className=\"PostDetails__list\">\n              {commentsFromServer\n                && commentsFromServer.length > 0\n                && showComments ? commentsFromServer.map(comment => (\n                  <li\n                    key={comment.id}\n                    className=\"PostDetails__list-item\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => handleDeleteButton(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.name}</p>\n                  </li>\n                )) : (<p>{commentsState}</p>)}\n            </ul>\n          </section>\n        </div>\n      )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            updateComments={loadingPostComments}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","export async function getData() {\n  const response = await Promise.all([\n    fetch('https://mate.academy/students-api/users/'),\n    fetch('https://mate.academy/students-api/posts'),\n  ]);\n\n  if (!response[0].ok || !response[1].ok) {\n    throw new Error('Error ocured while fetching the data');\n  }\n\n  const users = await response[0].json();\n  const posts = await response[1].json();\n\n  return [users, posts];\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { getUserPosts, getPostDetails } from './api/posts';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getData } from './api/user';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSeledtedPostId] = useState(0);\n  const [post, setPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    async function getPosts() {\n      if (userId === 0) {\n        const [usersFromServer, postsFromServer] = await getData();\n        const preparedUsers = usersFromServer.filter((user: User) => postsFromServer\n          .find((postSearch: Post) => postSearch.userId === user.id));\n\n        setUsers(preparedUsers);\n\n        setPosts(postsFromServer);\n      } else {\n        const userPosts = await getUserPosts(userId);\n\n        setPosts(userPosts);\n      }\n    }\n\n    getPosts();\n  }, [userId, selectedPostId]);\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setUserId(Number(value));\n  };\n\n  const handlePostSelect = useCallback(async (value) => {\n    const selectedPost = await getPostDetails(value);\n\n    setSeledtedPostId(value);\n\n    setPost(selectedPost);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"userName\">\n          Select a user: &nbsp;\n\n          <select\n            name=\"userName\"\n            className=\"App__user-selector\"\n            onChange={handleSelectChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.length > 0 && users.map(user => (\n              <option key={user.name} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPostId={selectedPostId}\n            posts={posts}\n            selectPost={handlePostSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {post\n            ? (\n              <PostDetails\n                selectedPostId={selectedPostId}\n                post={post}\n              />\n            )\n            : <h1>Select a post</h1> }\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}